# 1. Introduction to Operating Systems



## 01. 운영체제 (Operating System, OS)

컴퓨터 하드웨어 바로 위에 설치되어 사용자 및 다른 모든 소프트웨어와 하드웨어를 연결하는 시스템 소프트웨어

![Operating_system_placement_kor](https://user-images.githubusercontent.com/77573938/111075169-14dbc580-852a-11eb-8548-5d4f56ccdb70.png)

- 협의의 운영체제 (**커널**)
  - 운영체제의 핵심 부분으로 컴퓨터 부팅 후 항상 메모리에 상주
- 광의의 운영체제
  - 메모리에 상주하지 않는 일종의 별도의 프로그램들
  - 커널을 포함하여 각종 주변 시스템 유틸리티를 포함한다.
  - ex. Windows 운영체제를 설치하면, 단순히 운영체제 커널만 있는 것이 아니라 여러 부가적인 프로그램들이 같이 설치 된다.



## 02. 운영체제의 목적

1. 컴퓨터 시스템의 **자원(프로세서, 기억장치, 입출력장치 등)을 효율적으로 관리** - 운영체제의 핵심 기능

   - 효율성 : **주어진 자원으로 최대한의 성능을 내도록** 실행중인 프로그램들에게 CPU를 번갈아 할당시키고(CPU 스케줄링), 메모리 공간을 적절히 분배
   - 형평성 : 사용자 간의 형평성 있는 자원 분배를 할 수 있도록 하는 부가적인 목적

2. 사용자에게 컴퓨터 시스템을 **편리하게 사용할 수 있는 환경을 제공**

   - 운영체제는 동시 사용자/프로그램들이 각각 독자적 컴퓨터에서 수행되는 것 같은 환상을 제공한다.
   - 하드웨어를 직접 다루는 복잡한 부분을 운영체제가 대행



## 03. 운영 체제의 분류

### 1. 동시 작업 가능 여부

- 단일 작업
  - 예전의 운영체제. ex. MS-DOS
  - 프로그램 하나만 실행하므로 설계하기 쉽다.
- 다중 작업
  - 현대의 운영체제
  - ex. UNIX, MS Windows, 스마트폰에서 실행되는 운영체제

### 2. 동시 사용자 수

- 단일 사용자
  - 단일 작업만 지원하는 운영체제는 당연히 단일 사용자만 가능
  - MS-DOS, Windows 95 이전 버전
- 다중 사용자
  - 컴퓨터 한대를 여러 사용자(계정)가 동시에 접속해서 사용할 수 있도록 구성된 시스템
  - 보안 기능, 사용자 간의 형평성 있는 자원관리 기능 필요
  - UNIX, Linux, NT server, Windows 98 이후 버전

### 3. 처리 방식

- 일괄 처리 (batch processing)
  - 작업 요청을 일정량 모아서 한꺼번에 처리 → interactive 하지 않음
  - 초기 운영체제의 형태. 작업이 완전 종료 될때까지 기다리는 시간이 많아 비효율적
  
- **시분할 (time sharing)**
  
  - 현대 운영체제의 방식. 일괄처리 시스템에 비해 짧은 응답시간을 가지며 interactive 함
  - 여러 작업을 수행할 때 컴퓨터 처리 능력을 일정한 시간 단위로 분할하여 사용
  - ex. Linux, Unix, Windows, Android, IOS
  
- 실시간 (Real Time OS)
  
  - Deadline이 있어 정해진 시간 안에 반드시 결과가 나오도록 보장해주는 시스템
  
  - 매우 빠른 입력, 처리 속도를 가짐
  
  - 특수한 목적을 가진 시스템에서 사용
    
    예) 증권 거래 관리 시스템, 은행 입출금 시스템, 우주선 비행 시스템, 반도체 장비, 미사일, 로보트 제어 등 임베디드 OS는 대부분 RTOS
    
  - #### Soft realtime system
    
    : 영화 재생같이 멀티미디어에서 초당 프레임을 불러와야하는 경우, deadline은 있지만 어겼다고 큰 문제가 발생하지는 않는 시스템.
    
    하지만 실제로 영화를 보는 application은 RTOS를 쓰고 있지 않고, time sharing 위에서 돌아간다. 그러나 점점 데드라인을 필요로 하는 스마트폰 APP들이 생겨나고 있다. 
    
    예) 자동차 네비게이션 : 지금 우회전 해야하는데 데드라인을 못 지켜서 0.5초 있다가 우회전하라고 알려주면 엉뚱한 길로 가게 됨 
    ​	 블랙박스 영상 촬영 :  사고가 나는 그 순간 0.5초를 놓쳐서 못 찍었다면 이 앱은 쓸모가 없음
    
    ⇒ 범용 컴퓨터에 비해 스마트폰 같이 실시간성을 필요로 하는 응용프로그램들이 늘어나고 있어 운영체제도 이러한 application을 어떻게 지원해줘야 하느냐가 중요한 이슈이다.



## 04. 운영체제의 예

![image-20210314164405064](https://user-images.githubusercontent.com/77573938/111075173-173e1f80-852a-11eb-8185-7f45e329075c.png)

### UNIX

대형 컴퓨터(server)를 위해 만들어진 운영체제 → 멀티태스킹 가능, 다중 사용자 동시에 지원

- 초창기 운영체제를 구성할 때, 어셈블리어가 복잡하고 어려워 C언어를 만들게 됨 → 대부분의 커널 코드가 **C언어**로 작성됨
- 소스코드 공개, 높은 이식성(Portability), 최소한의 커널 구조 → 프로그램 개발에 용이, 높은 확장성을 가짐

### Windows

개인용 컴퓨터(pc)를 위해 만들어진 운영체제 →  초기에는 단일 작업, 단일 사용자만 지원

- GUI 기반 운영 체제
- 다중 작업 가능



## 05. 운영체제의 구조

![image-20210314164947718](https://user-images.githubusercontent.com/77573938/111075175-1907e300-852a-11eb-8c35-5ed8d89a862b.png)



## _cf_. 용어 정리

#### CPU 1개

아래의 용어는 컴퓨터에서 여러 작업을 동시에 수행하는 것을 의미하며 유사하게 사용된다. 

여러개의 task가 동시에 돌아가고 있지만 CPU에서는 하나의 작업만 실행된다. 짧은 간격으로 분할해서 할당하기 때문에 마치 동시에 실행되는 것처럼 보인다. 

- Multitasking : 일반적인 용어
- Multiprogramming : 여러 프로그램이 메모리에 올라가 있음을 강조
- Time sharing : CPU의 시간을 분할하여 나누어 쓴다는 의미를 강조
- Multiprocess : process(실행중인 프로그램) 측면을 부각

#### CPU 여러개

- Multiprocessor : 하나의 컴퓨터에 CPU (processor)가 여러개 붙어 있음을 의미. 멀티태스킹은 당연히 가능하고, 하드웨어적으로 다른 시스템

<br><br>

- 사진 출처 :  구글
